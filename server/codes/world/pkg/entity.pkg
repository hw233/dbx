// filename : entity.pkg
// 实体相关pkg

$#include "Entity.h"

_PropPosData g_PosData;

enum _UnitPropId
{
	UNIT_STATUS,
	UNIT_POS,
	UNIT_MOVE_SPEED,
	UNIT_BASE,
};
struct GridVct;
enum EntityType
{
	eLogicNone = 0,
	eLogicPlayer,
	eLogicNpc,
	eLogicPet,
	eLogicMonster,
	eLogicFollow,
	eLogicMineNpc,
	eLogicMpw,
	eLogicMagic,
	eLogicFarmLand,
	eLogicCrop,
	MAX_LOGIC_TYPE
};

enum EntityPropType
{
	eClsTypeNone = 0,
	eClsTypePlayer,
	eClsTypeNpc,
	eClsTypePet,
	eClsTypeMpw,
	eClsTypeMagic,
	eClsTypeFarmLand,
	eClsTypeCrop,
	MAX_CLASS_TYPE
};

class CoEntity
{
public:
	static CoEntity* Create(EntityType type, EntityPropType propType);

public:
	short correctMovePath(short x, short y);

	short correctFollowMovePath(short refIdx, short refPathLen);

	short getPathLen() const;

	void moveByPath(lua_State* pState, _PropPosData* pPropPosData);

	bool move(short x = 0, short y = 0, int flags = 0x10);

	void setMoveSpeed(short sp);

	short getMoveSpeed();

	void moveFollowEntity(lua_State* pState, short offset, _PropPosData* pPropPosData);

	void stopMove(short x = 0, short y = 0);

	bool isInView(handle hand);

	void setDBID(int dbId);

	handle getHandle();

	void setGateLink(handle hGate);

	void setGatewayID(short gatewayId);

	void setClientLink(handle hClient);

	GridVct getPosition();
public:
	bool enterScene(CoScene* pScene, short x, short y);

	bool quitScene();

	void release();

};
