编译：
	so：
		gcc -c -g3 -pthread -fPIC  -I../codes/share -I../codes/sock/inc -o ../sbin/temp/Sock/Sock.o ../codes/sock/src/Sock.cpp
		gcc -o ../sbin/linux/libSock.so  ../sbin/temp/Sock/Sock.o -shared -lstdc++ -pthread
	exe：
		gcc -c -g3 -pthread  -I../codes/share -I../codes/sock/inc -o ../sbin/temp/Test/test.o ../codes/test/test.cpp
		gcc -o ../sbin/linux/Test  ../sbin/temp/Test/test.o -L../sbin/linux -lrt -lstdc++ -pthread -lSock
	warnings：
		-Wno-deprecated，放到自己makefile的增强编译项里面

编译后检验2进制文件：
	ldd -u -r libSock.so（进行符号的重定位，进而查找未定义的符号）
	readelf -d libSock.so（查看so基本信息）
	readelf -s libSock.so（查看.dynsym段，即导出符号表，查看.symtab段，即全部符号表）
	readelf -wi libSock.so（查看调试信息）

查看makefile中的变量：
	make -f sock.mak -f debug.mak d-PROJECT_NAME

运行时加载so的设置：
	export LD_LIBRARY_PATH=`pwd`

ldconfig使用：
	ldconfig，对缺省路径进行操作
	ldconfig $(pwd)，对当前目录进行操作
	ldconfig -l libSock.so，对指定文件建立连接
	ldconfig -p，对结果进行查看

svn设置：
	svn设置忽略：
		svn plist ./
		svn pget svn:ignore ./
		svn propset svn:ignore "*.o" ./（忽略当前路径下的指定文件或者路径）

	svn设置提交代码时候的编辑器：
		export SVN_EDITOR=vim

vim设置：
	文件查找：
		help file-searching
	vim设置tags和gf：
		set tags+=/root/server/codes/tags
		set path+=/root/server/codes/**
	vim操作：
		vimgrep /pthread_t/ /usr/include/**/*.*